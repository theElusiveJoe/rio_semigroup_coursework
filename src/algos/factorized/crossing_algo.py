from __future__ import annotations

from operator import attrgetter
from pprint import pp, pformat
from tqdm import tqdm
from dataclasses import dataclass, field

from universes import Universe
from monoid import MonoidController, MonoidElem
from utils.logger import log, LogFlags
from utils.timer import timer

from .bs_prefix_tree import PrefixTree
from .queue import QueueElem, Queue
from .semigroup_repr import SemigroupRepr
from .easy_node import EasyNode, MonoidElemKind
from .dict_wrapper import DictWrapper
from utils.action_tracker import AT


class CrossingAlgo:
    mc: MonoidController
    table: DictWrapper
    value_table: dict[Universe, EasyNode]

    sr1: SemigroupRepr
    sr2: SemigroupRepr

    bs_A: PrefixTree
    bs_B: PrefixTree

    queue: Queue

    def __init__(self, sr1: SemigroupRepr, sr2: SemigroupRepr) -> None:
        self.mc = sr1.mc
        self.sr1, self.sr2 = sr1, sr2

    def another_bs_kind(self, kind: MonoidElemKind):
        return {
            MonoidElemKind.A: self.bs_B,
            MonoidElemKind.B: self.bs_A,
        }[kind]

    def string_in_one_of_trees(self, string: MonoidElem):
        return bool(self.bs_A.find_node(string) or self.bs_B.find_node(string))

    def run(self):
        print('\n>>ü¶ú Crossing started')

        self.grow_bs_prefix_tree()
        self.merge_cayley_graphs()
        self.setup_queue()
        self.calc_crossing()
        self.normalize_linked_strings()

        return self.to_sr()

    def to_sr(self):
        return SemigroupRepr(
            self.mc,
            dict(self.table),
            self.value_table,
            self.sr1.sigma | self.sr2.sigma
        )

    def grow_bs_prefix_tree(self):
        # —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
        self.bs_A = PrefixTree(
            bs=[(node.string, val)
                for val, node in sorted(self.sr1.value_table.items(), key=lambda pair: pair[1].string)
                if val != self.mc.identity()],
            id_val=self.mc.identity(),
        )
        self.bs_B = PrefixTree(
            bs=[(node.string, val)
                for val, node in sorted(self.sr2.value_table.items(), key=lambda pair: pair[1].string)
                if val != self.mc.identity()],
            id_val=self.mc.identity(),
        )

    def rm_bs_from_table_and_trees(self, string: MonoidElem, table: dict):
        self.bs_A.delete_all_superstrings_from_table_and_tree(string, table)
        self.bs_B.delete_all_superstrings_from_table_and_tree(string, table)

    def merge_cayley_graphs(self):
        values1, values2 = set(self.sr1.value_table.keys()), set(
            self.sr2.value_table.keys())
        # values1.discard(self.mc.identity())
        # values2.discard(self.mc.identity())
        common_values = values1.intersection(values2)

        for cv in common_values:

            n1, n2 = self.sr1.value_table[cv], self.sr2.value_table[cv]

            if n1.string < n2.string:
                table, value_table = self.sr2.table, self.sr2.value_table
                node, short_node = n2, n1
                tree_with_big_string = self.bs_B
            else:
                table, value_table = self.sr1.table, self.sr1.value_table
                node, short_node = n1, n2
                tree_with_big_string = self.bs_A

            # —É–±–∏—Ä–∞–µ–º –Ω–æ–¥—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏–π
            del value_table[cv]

            # node.string -> short_node.string

            if not short_node.string.is_identity():
                short_node.linked_strings.add(node.string)

            short_node.linked_strings |= node.linked_strings

            # —É–¥–∞–ª—è–µ–º node.string –∏–∑ prefix_tree

            self.rm_bs_from_table_and_trees(node.string, table)
            tree_with_big_string.delete_all_superstrings_from_table_and_tree(
                node.string, table)

        # —Å–æ–±–µ—Ä–µ–º –≤–º–µ—Å—Ç–µ –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã
        self.table = DictWrapper({**self.sr1.table, **self.sr2.table})
        self.value_table = {**self.sr1.value_table, **self.sr2.value_table}

    def setup_queue(self):

        self.queue = Queue()

        q = list[QueueElem]()

        for bs_node in self.bs_A.root.get_succ_nodes():
            q.append(
                QueueElem(
                    prefix=MonoidElem.identity(),
                    prefix_value=self.mc.identity(),
                    bs_node=bs_node,
                    kind=MonoidElemKind.A,
                )
            )

        for bs_node in self.bs_B.root.get_succ_nodes():
            q.append(
                QueueElem(
                    prefix=MonoidElem.identity(),
                    prefix_value=self.mc.identity(),
                    bs_node=bs_node,
                    kind=MonoidElemKind.B,
                )
            )

        for qelem in sorted(q, key=lambda x: x.bs_node.string.last()):
            self.queue.add(qelem)

    def calc_crossing(self):

        def generator():
            while len(self.queue) > 0:
                yield

        for _ in tqdm(generator()):
            # –≤—ã–¥–µ—Ä–≥–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏

            qelem = self.queue.pop()

            # –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
            # –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∞
            switch_kind_nodes = self.another_bs_kind(
                qelem.kind).root.get_succ_nodes()
            succ_nodes = qelem.bs_node.get_succ_nodes()

            AT.expect_to_check += len(switch_kind_nodes) + len(succ_nodes)

            def next_switch_kind():

                return QueueElem(
                    qelem.to_string(),
                    qelem.prefix_value * qelem.bs_node.value,
                    sk_node,  # type: ignore
                    qelem.kind.another(),
                )

            def next_succ():

                return QueueElem(
                    qelem.prefix,
                    qelem.prefix_value,
                    succ_node,  # type: ignore
                    qelem.kind,
                )

            # —É–∑–ª—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Ç—É—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—Ñ–∏–∫—Å—ã
            sk_root, succ_root = self.another_bs_kind(
                qelem.kind).root, qelem.bs_node
            # –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
            sk_keys, succ_keys = sk_root.get_succ_keys(), succ_root.get_succ_keys()
            sk_index, succ_index = 0, 0

            # –ø–µ—Ä–µ–±–µ—Ä–∞–µ–º –≤—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
            while True:
                try:
                    sk_node = sk_root.get_succ(sk_keys[sk_index])
                    while sk_node is None:
                        sk_index += 1
                        sk_node = sk_root.get_succ(sk_keys[sk_index])
                except IndexError:
                    sk_node = None

                try:
                    succ_node = succ_root.get_succ(succ_keys[succ_index])
                    while succ_node is None:
                        succ_index += 1
                        succ_node = succ_root.get_succ(succ_keys[succ_index])
                except IndexError:
                    succ_node = None

                if sk_node is None and succ_node is None:
                    break
                elif succ_node is None or sk_node is not None and sk_node.string.last() < succ_node.string.last():
                    new_qelem = next_switch_kind()
                    sk_index += 1
                else:
                    new_qelem = next_succ()
                    succ_index += 1

                AT.checked_real += 1

                # ua - —ç—Ç–æ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —Ç.–µ. prefix = eps
                # ua —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã—à–µ–ª –∏–∑ prefix tree,
                # –∑–Ω–∞—á–∏—Ç sa —Ç–æ—á–Ω–æ –Ω–∏–∫—É–¥–∞ –Ω–µ —Ä–µ–¥—É—Ü–∏—Ä—É–µ—Ç—Å—è
                # –∏ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
                # –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –µ–µ –≤ –æ—á–µ—Ä–µ–¥—å
                if new_qelem.prefix.is_identity():
                    self.queue.add(new_qelem)

                    AT.skipped_as_bs += 1
                    continue

                ua = new_qelem.to_string()
                sa = ua.suffix()
                sa_node = self.table.get(sa)

                # sa —Ä–µ–¥—É—Ü–∏—Ä—É–µ–º–∞, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
                if sa_node is None:

                    AT.reduced_by_str += 1
                    continue

                # –Ω–∞–π–¥–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ua
                ua_val = new_qelem.get_value()
                # –∏ –ø–æ–∏—â–µ–º –Ω–æ–¥—É —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                ua_min_node = self.value_table.get(ua_val)

                # –º—ã –Ω–∞—à–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if ua_min_node is None:
                    new_node = EasyNode(
                        value=ua_val,
                        string=ua,
                    )
                    self.table[ua] = new_node
                    self.value_table[ua_val] = new_node
                    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
                    self.queue.add(new_qelem)

                    AT.new_values_found += 1
                    continue

                # —Ç–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å, –∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç —É–∂–µ
                # –Ω–∞–π–¥–µ–Ω–Ω—É—é
                if ua_min_node.string < ua:
                    log(lambda:
                        f'string with such value exists {ua_min_node.string} and less than ua: just link ua to it', lvl=5)  # type: ignore
                    ua_min_node.heterogenic_linked_strings.add(ua)
                    AT.reduced_by_value += 1
                    continue
                # —Ç–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å,
                # ua < ua_min_string
                # –∑–Ω–∞—á–∏—Ç, ua_min_string - –≥–æ–º–æ–≥–µ–Ω–Ω–∞—è
                else:
                    old_node = ua_min_node
                    log(lambda:
                        f'string with such value exists {old_node.string}, but ua {ua} is less', lvl=5)
                    # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª
                    new_node = EasyNode(
                        value=ua_val,
                        string=ua,
                    )

                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª –≤ —Ç–∞–±–ª–∏—Ü—ã
                    self.table[ua] = new_node
                    self.value_table[ua_val] = new_node

                    new_node.linked_strings |= old_node.linked_strings
                    new_node.heterogenic_linked_strings |= old_node.heterogenic_linked_strings

                    # —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–µ–¥—É—Ü–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–æ–≤–æ–π
                    old_string = old_node.string

                    new_node.linked_strings.add(old_string)

                    # —É–¥–∞–ª—è–µ–º old_string –∏–∑ prefix_tree

                    self.rm_bs_from_table_and_trees(old_string, self.table)

                    # –Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å

                    self.queue.add(new_qelem)
                    AT.replaced_old_strings += 1

    def normalize_linked_strings(self):

        for node in self.table.values():
            node.linked_strings = set(filter(
                lambda w: self.string_in_one_of_trees(
                    w.prefix()) and self.string_in_one_of_trees(w.suffix()),
                node.linked_strings
            ))
            node.linked_strings |= node.heterogenic_linked_strings
            node.heterogenic_linked_strings = set()
